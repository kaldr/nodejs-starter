'use strict';

var $ = require('jquery');

angular.module('angularSemanticUi')
    .directive('semantic', function() {

        return {
            restrict: 'A',
            scope: {
                semantic: '=',
                ngModel: '='
            },
            controller: ($scope, $element, $timeout, $state) => new AngularSemanticComponent($scope, $element, $timeout, $state)
        };
    });

class AngularSemanticComponent {
    constructor($scope, $element, $timeout, $state) {
        var options = $scope.semantic || {};

        this.$timeout = $timeout;
        this.$scope = $scope;

        $timeout(() => {
            this.initialize($($element), $state, options)
        });
    }

    initialize($element, $state, options) {
        var is = (selector) => $element.is(selector);
        is('.ui.dropdown') && this.dropdown($element, options);
        is('.ui.checkbox') && this.checkbox($element, options);
        is('.ui.accordion') && this.accordion($element, options);
        is('.ui.modal') && this.modal($element, $state, options);
        is('.file.input') && this.fileInput($element, options);
        is('[data-content]') && this.popup($element, options);
    }

    dropdown($element, options, onModelChangeSetter) {
        this.$scope.$watch('ngModel', () => {
            this.$timeout(() => {
                var dropdown = $element.is('.dropdown') ? $element : $element.parent();

                dropdown.dropdown('set selected', this.$scope.ngModel);
                if (!dropdown.find('input:not(.search),select').val()) {
                    dropdown.dropdown('clear');
                }
            });
        });

        $element.dropdown(_.defaults(
            options,
            {
                onChange: value => {
                    if (value && !$element.is('select') && !$element.find('select').length) {
                        this.$timeout(() => this.$scope.ngModel = value);
                    }
                }
            }
        ));
    }

    accordion($element, options) {
        $element.accordion(_.defaults(
            options,
            {
                exclusive: false
            }
        ));
    }

    popup($element, options) {
        $element.popup(_.defaults(
            options,
            {}
        ));
    }

    modal($element, $state, options) {
        $element
            .modal('setting', _.defaults(
                options,
                {
                    onHidden: () => $state.go('^', {}, {reload: true}),
                    blurring: true,
                    observeChanges: true
                }
            ))
            .modal('show')
            .modal('refresh');

        var interval = setInterval(() => $element.modal('refresh'), 100);
        setTimeout(() => clearInterval(interval), 2000);
    }

    checkbox($element, options) {
        $element.checkbox(_.defaults(
            options,
            {
                onChange: () => angular.element($element.find('input')).triggerHandler('click')
            }
        ));
    }

    fileInput($element) {
        $element.find('[type="text"], .button').click(() => $element.find('[type="file"]').click());
        $element.find('[type="file"]').change(function(e) {
            $element.find('[type="text"]').val(e.target.files[0].name).change();
        });
    }
}